#!/bin/bash 

xpl_path=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
cd $xpl_path

function usage()
{
    echo "$0 [<targets> ...]"
    echo "Available targets:"
    echo "    clean         clean sources" 
    echo "    depclean      clean sources and makefiles" 
    echo "    build         compile and link sources" 
    echo "    package       create source and install packages" 
    echo "    install       install packages on the system"
    echo "    test          run tests" 
    echo "    cdash         perform unit tests with gcov and send results to cdash" 
    echo "    doxygen       generate doxygen documentation" 
    echo "    eclipse       generate eclipse project" 
    echo "    codeblocks    generate code::blocks project" 
    echo "Build options:"
    echo "    -jx                number of parallel process to use for build" 
    echo "    --tests=pattern    list of tests to be run, see google test documentation" 
    echo "    --release          build with release informations (by default build is made with debug informations)" 
    echo "    --clang            build with clang instead of gcc" 
    echo "    --profiler=name    build using a profiling tool from list (ftrace, LeakSanitizer, AddressSanitizer, valgrind, callgrind)" 
    echo "    --ddd              run tests through ddd debugger"
    echo "    --verbose          enable verbose mode" 
    echo
    echo "help: output command help and quit" 
    exit 0
}
possible_args=" clean depclean build package install test cdash doxygen eclipse codeblocks -j --release --clang --profiler --verbose --ddd help"

#Options
opt_release=0 
opt_clang=0
opt_verbose=0 
opt_ddd=0
opt_tests=""

#Targets
tgt_clean=0
tgt_depclean=0
tgt_build=0
tgt_package=0
tgt_install=0 
tgt_test=0 
tgt_cdash=0 
tgt_doxygen=0 
tgt_eclipse=0
tgt_codeblocks=0

target=0

cmake_opts="-DCTEST_USE_LAUNCHERS=ON"
make_opts=""
command=""
post_command=""

#test command line arguments
for arg in "$@"
do
    filt_arg="$(echo $arg | sed "s#\(.*\)=.*#\1#g")"
    
    if [[ ! $possible_args =~ " $filt_arg " ]] && [[ ! $arg =~ ^-j.* ]]
    then
        usage
        exit 1 
    fi
done

#Explore each argument to set options
for arg in "$@"
do
    if [ "_$(echo "$arg" | grep '=')" != "_" ]
    then
        filt_arg="$(echo $arg | sed "s#\(.*\)=.*#\1#g")"
        value_arg="$(echo $arg | sed "s#.*=\(.*\)#\1#g")"
    else
        filt_arg=$arg
        unset value_arg
    fi
    
    if [[ "_$arg" == "_clean" ]]
    then
        tgt_clean=1
        target=1
    elif [[ "_$arg" == "_depclean" ]]
    then
        tgt_depclean=1
        target=1
    elif [[ "_$arg" == "_package" ]]
    then
        tgt_build=1
        target=1
        tgt_package=1
    elif [[ "_$arg" == "_install" ]]
    then
        tgt_build=1
        target=1
        tgt_package=1
        tgt_install=1
    elif [[ "_$arg" == "_deploy" ]]
    then
        tgt_build=1
        target=1
        tgt_package=1
        deploy=1
    elif [[ "_$arg" == "_test" ]]
    then
        tgt_test=1
        tgt_build=1        
        target=1
    elif [[ "_$arg" == "_cdash" ]]
    then
        tgt_cdash=1
        target=1
    elif [[ "_$arg" == "_doxygen" ]]
    then
        tgt_doxygen=1
        target=1
    elif [[ "_$arg" == "_eclipse" ]]
    then
        tgt_eclipse=1
        target=1
    elif [[ "_$arg" == "_codeblocks" ]]
    then
        tgt_codeblocks=1
        target=1
    elif [[ $filt_arg =~ -j.* ]]
    then
        make_opts="$make_opts $filt_arg"
    elif [[ "_$filt_arg" == "_--tests" ]]
    then
        if [[ "_$value_arg" != "_" ]]
        then
            opt_tests="$value_arg"
        fi
    elif [[ "_$arg" == "_--release" ]]
    then
        opt_release=1
    elif [[ "_$arg" == "_--clang" ]]
    then
        opt_clang=1
    elif [[ "_$filt_arg" == "_--profiler" ]]
    then
        if [[ "_$value_arg" != "_" ]]
        then
            opt_profiler="$value_arg"
        else
            usage
            exit 1
        fi
    elif [[ "_$arg" == "_--verbose" ]]
    then
        opt_verbose=1
    elif [[ "_$arg" == "_--ddd" ]]
    then
        opt_ddd=1
        elif [[ "_$arg" == "_help" ]]
    then
        usage
        exit 1
    fi
done


function tgt_clean()
{
    echo "## Clean"

    make clean    
}

function tgt_depclean()
{
    echo "## Clean all"

    eval "find . -depth -type d -name Build ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -rf {} \;"
    eval "find . -depth -type d -name CMakeFiles ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -rf {} \;"
    eval "find . -depth -type d -name _CPack_Packages ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -rf {} \;"
    eval "find . -depth -type d -name Testing ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -rf {} \;"
    eval "find . -depth -type f -name install_manifest.txt ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name Makefile ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name CMakeCache.txt ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name "cmake_install.cmake" ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name "CTestConfig.cmake" ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name "CTestTestfile.cmake" ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    eval "find . -depth -type f -name "DartConfiguration.tcl" ${DEPCLEAN_CUSTOM_PATTERN} -exec rm -f {} \;"
    rm -rf Testing
}

function clean_exit()
{
    # clean binary files, this will force link at the next build
    #TODO    
    
    exit 1
}

function tgt_build()
{
    echo "## Build target"

    # configure build
    if [ ! -f Build/CMakeLists.txt ]
    then
        mkdir -p Build || clean_exit
        eval "cmake -BBuild -H. $cmake_opts" || clean_exit
    fi
    
    # build now
    cd Build
    make $make_opts || clean_exit
    cd -      
}

function tgt_package()
{
    echo "## Package"
    #TODO
    
    # configure build
    #mkdir -p Build || clean_exit
    #eval "cmake -BBuild -H. $cmake_opts -DBUILD_PACKAGES=true" || clean_exit
    
    # build now
    #cd Build
    #make $make_opts || clean_exit
    #cd -          
}

function tgt_install()
{
    echo "## Install"
    # TODO
}

function tgt_test()
{
    echo "## Tests"

	if [ "_${opt_profiler}" != "_" ]
	then
		opt="--profiler=${opt_profiler}"
	fi
	
	if [ ${opt_ddd} -ne 0 ]
	then
		opt="--ddd"
	fi

	tests/scripts/run-tests.sh $opt || clean_exit
}


function tgt_cdash()
{
    echo "## CDash report"

    $command_opts ctest -V -D Experimental -D NightlyMemCheck
}

function tgt_doxygen()
{
    echo "## CDash report"

	if [[ "_$(which doxygen)" == "_" ]]
	then
		echo "Doxygen not installed"
		exit 1
	fi
	if [[ "_$(which gvmap)" == "_" ]]
	then
		echo "Graphviz not installed"
		exit 1
	fi
	
    doxygen Doxyfile
}

export TYPE_FOLDER=26
export TYPE_FILE=22
function addfilter()
{
    type=$1
    value=$2
    filter="<filter><id>$(( RANDOM % 9999999 ))</id><name></name><type>$type</type><matcher><id>org.eclipse.ui.ide.multiFilter</id><arguments>1.0-name-matches-true-false-$value</arguments></matcher></filter>"

    sed -i "s#</filteredResources>#${filter}\n</filteredResources>#g" .project
}

function tgt_eclipse()
{
    echo "## Create Eclipse project"

    cmake . -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_ARG1="-std=c++14"	
    
	sed -i "s#</projectDescription>##g" .project
	echo "<filteredResources>" >> .project
	echo "</filteredResources>" >> .project
	echo "</projectDescription>" >> .project

	addfilter $TYPE_FOLDER CMakeFiles
#	addfilter $TYPE_FOLDER Build	
#	addfilter $TYPE_FOLDER Testing	
    addfilter $TYPE_FILE CMakeCache.txt
    addfilter $TYPE_FILE DartConfiguration.tcl
    addfilter $TYPE_FILE Makefile
    addfilter $TYPE_FILE cmake_install.cmake
    addfilter $TYPE_FILE CTestConfig.cmake
    addfilter $TYPE_FILE CTestTestfile.cmake
    
    # add c++11 support for intexer
    rm -rf .settings
	cp -r .settings_template .settings	
}

function tgt_codeblocks()
{
    echo "## Create Code::Blocks project"

    cmake . -G"CodeBlocks - Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_ARG1=-std=c++11
}

set -a # automatic export of configuration variables
# if exist load default configuration file
test -f build-config && source build-config
set +a

# configure profiling
if [[ "_$opt_profiler" != "_" ]]
then 
# TODO? MemorySanitizer, ThreadSanitizer, DataFlowSanitizer, cpuprofiler, gcov
	opt_release=0
	
	if [[ "_$opt_profiler" == "_LeakSanitizer" ]]
	then
		echo "LeakSanitizer enabled"
		opt_clang=1
	   	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=LeakSanitizer"
	elif [[ "_$opt_profiler" == "_AddressSanitizer" ]]
	then
		echo "Address enabled"
    	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=AddressSanitizer"
	elif [[ "_$opt_profiler" == "_tcmalloc" ]]
	then
		echo "tcmalloc enabled"
    	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=tcmalloc"
	elif [[ "_$opt_profiler" == "_valgrind" ]]
	then
		echo "valgrind enabled"
    	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=valgrind"
	elif [[ "_$opt_profiler" == "_callgrind" ]]
	then
		echo "callgrind enabled"
    	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=callgrind"
	elif [[ "_$opt_profiler" == "_ftrace" ]]
	then
		echo "ftrace enabled"
    	cmake_opts="$cmake_opts -DTOOLCHAIN_PROFILER=ftrace"
	else
		echo "$opt_profiler is not a valid profiler option"  
	fi
fi

# link with gold to speedup link
if [ "_$(which gold)" != "_" ]
then
	cmake_opts="$cmake_opts -DTOOLCHAIN_LINKER=gold"
fi

#Output anything outputted by the test program if the test should fail.
CTEST_OUTPUT_ON_FAILURE=true

if [ $opt_release -eq 1 ]
then
    cmake_opts="$cmake_opts -DCMAKE_BUILD_TYPE=Release"
else
    cmake_opts="$cmake_opts -DCMAKE_BUILD_TYPE=Debug"
fi 

# configure ccache
if [ ! $tgt_eclipse ] && [[ "_$(which ccache)" != "_" ]]
then
	echo "ccache enabled"
	CCACHE="ccache "
fi

# set compiler
if [ $opt_clang -eq 1 ]
then
	echo "Build using clang"
	
	if [ -f ${xpl_path}/Build/CMakeCache.txt ] && [ "_$(grep CMAKE_CXX_COMPILER ${xpl_path}/Build/CMakeCache.txt | grep clang++)" == "_" ]
	then
		echo "Previous build was not made with clang, depclean before changing compiler"
		exit 1 
	fi
    export CC="$CCACHE$(ls -r1 /usr/bin/clang-* | grep "clang-[0-9]" | head -n1)"
    export CXX="$CCACHE$(ls -r1 /usr/bin/clang++-* | grep "clang++-[0-9]" | head -n1)"
else
	echo "Build using gcc"

	if [ -f ${xpl_path}/Build/CMakeCache.txt ] && [ "_$(grep CMAKE_CXX_COMPILER ${xpl_path}/Build/CMakeCache.txt | grep g++)" == "_" ]
	then
		echo "Previous build was not made with clang, depclean before changing compiler"
		exit 1 
	fi
    export CC="$CCACHE$(ls -r1 /usr/bin/gcc-* | grep "gcc-[0-9]" | head -n1)"
    export CXX="$CCACHE$(ls -r1 /usr/bin/g++-* | grep "g++-[0-9]" | head -n1)"
fi

echo $CC
echo $CXX

if [ $opt_ddd -eq 1 ]
then
    #TODO: add configuration for valgrind path
    command="ddd"
    cmake_opts="$cmake_opts -DCMAKE_BUILD_TYPE=Debug"    
fi

if [ $opt_verbose -eq 1 ]
then
    cmake_opts="$cmake_opts -DCMAKE_VERBOSE_MAKEFILE=ON"
    make_opts="$make_opts VERBOSE=1"
else
    cmake_opts="$cmake_opts -DCMAKE_VERBOSE_MAKEFILE=OFF"
fi

if [ $target -eq 0 ]
then
    # if no target choosen then just do some build
    tgt_build=1
fi

test $tgt_depclean -eq 0 || tgt_depclean
test $tgt_clean -eq 0 || tgt_clean
test $tgt_build -eq 0 || tgt_build
test $tgt_test -eq 0 || tgt_test
test $tgt_package -eq 0 || tgt_package
test $tgt_install -eq 0 || tgt_install
test $tgt_cdash -eq 0 || tgt_cdash
test $tgt_doxygen -eq 0 || tgt_doxygen
test $tgt_eclipse -eq 0 || tgt_eclipse
test $tgt_codeblocks -eq 0 || tgt_codeblocks

#last command to be run
$post_command
